// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  public partial class C2R_Login : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Login> _parser = new pb::MessageParser<C2R_Login>(() => (C2R_Login)MessagePool.Instance.Fetch(typeof(C2R_Login)));
    public static pb::MessageParser<C2R_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Login : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Login> _parser = new pb::MessageParser<R2C_Login>(() => (R2C_Login)MessagePool.Instance.Fetch(typeof(R2C_Login)));
    public static pb::MessageParser<R2C_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private long gateId_;
    public long GateId {
      get { return gateId_; }
      set {
        gateId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Key);
      }
      if (GateId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(GateId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (GateId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      address_ = "";
      key_ = 0;
      gateId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Address = input.ReadString();
            break;
          }
          case 40: {
            Key = input.ReadInt64();
            break;
          }
          case 48: {
            GateId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_LoginGate> _parser = new pb::MessageParser<C2G_LoginGate>(() => (C2G_LoginGate)MessagePool.Instance.Fetch(typeof(C2G_LoginGate)));
    public static pb::MessageParser<C2G_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private long gateId_;
    public long GateId {
      get { return gateId_; }
      set {
        gateId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (GateId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(GateId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (GateId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      key_ = 0;
      gateId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 24: {
            GateId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_LoginGate> _parser = new pb::MessageParser<G2C_LoginGate>(() => (G2C_LoginGate)MessagePool.Instance.Fetch(typeof(G2C_LoginGate)));
    public static pb::MessageParser<G2C_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long playerId_;
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PlayerId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      playerId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_TestHotfixMessage : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TestHotfixMessage> _parser = new pb::MessageParser<G2C_TestHotfixMessage>(() => (G2C_TestHotfixMessage)MessagePool.Instance.Fetch(typeof(G2C_TestHotfixMessage)));
    public static pb::MessageParser<G2C_TestHotfixMessage> Parser { get { return _parser; } }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class MessageResponse : pb::IMessage {
    private static readonly pb::MessageParser<MessageResponse> _parser = new pb::MessageParser<MessageResponse>(() => (MessageResponse)MessagePool.Instance.Fetch(typeof(MessageResponse)));
    public static pb::MessageParser<MessageResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TestActorRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TestActorRequest> _parser = new pb::MessageParser<C2M_TestActorRequest>(() => (C2M_TestActorRequest)MessagePool.Instance.Fetch(typeof(C2M_TestActorRequest)));
    public static pb::MessageParser<C2M_TestActorRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ActorId);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      info_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            ActorId = input.ReadInt64();
            break;
          }
          case 26: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TestActorResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TestActorResponse> _parser = new pb::MessageParser<M2C_TestActorResponse>(() => (M2C_TestActorResponse)MessagePool.Instance.Fetch(typeof(M2C_TestActorResponse)));
    public static pb::MessageParser<M2C_TestActorResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      info_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => (PlayerInfo)MessagePool.Instance.Fetch(typeof(PlayerInfo)));
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2G_PlayerInfo> _parser = new pb::MessageParser<C2G_PlayerInfo>(() => (C2G_PlayerInfo)MessagePool.Instance.Fetch(typeof(C2G_PlayerInfo)));
    public static pb::MessageParser<C2G_PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<G2C_PlayerInfo> _parser = new pb::MessageParser<G2C_PlayerInfo>(() => (G2C_PlayerInfo)MessagePool.Instance.Fetch(typeof(G2C_PlayerInfo)));
    public static pb::MessageParser<G2C_PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.PlayerInfo playerInfo_;
    public global::ETHotfix.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.PlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(42, global::ETHotfix.PlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::ETHotfix.PlayerInfo>();
    public pbc::RepeatedField<global::ETHotfix.PlayerInfo> PlayerInfos {
      get { return playerInfos_; }
      set { playerInfos_ = value; }
    }

    private string testRepeatedString_ = "";
    public string TestRepeatedString {
      get { return testRepeatedString_; }
      set {
        testRepeatedString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_testRepeatedInt32_codec
        = pb::FieldCodec.ForInt32(58);
    private pbc::RepeatedField<int> testRepeatedInt32_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> TestRepeatedInt32 {
      get { return testRepeatedInt32_; }
      set { testRepeatedInt32_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_testRepeatedInt64_codec
        = pb::FieldCodec.ForInt64(66);
    private pbc::RepeatedField<long> testRepeatedInt64_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> TestRepeatedInt64 {
      get { return testRepeatedInt64_; }
      set { testRepeatedInt64_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayerInfo);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (TestRepeatedString.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TestRepeatedString);
      }
      testRepeatedInt32_.WriteTo(output, _repeated_testRepeatedInt32_codec);
      testRepeatedInt64_.WriteTo(output, _repeated_testRepeatedInt64_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (TestRepeatedString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestRepeatedString);
      }
      size += testRepeatedInt32_.CalculateSize(_repeated_testRepeatedInt32_codec);
      size += testRepeatedInt64_.CalculateSize(_repeated_testRepeatedInt64_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      if (playerInfo_ != null) MessagePool.Instance.Recycle(playerInfo_); playerInfo_ = null;
      for (int i = 0; i < playerInfos_.Count; i++) { MessagePool.Instance.Recycle(playerInfos_[i]); }
      playerInfos_.Clear();
      testRepeatedString_ = "";
      testRepeatedInt32_.Clear();
      testRepeatedInt64_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::ETHotfix.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 42: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 50: {
            TestRepeatedString = input.ReadString();
            break;
          }
          case 58:
          case 56: {
            testRepeatedInt32_.AddEntriesFrom(input, _repeated_testRepeatedInt32_codec);
            break;
          }
          case 66:
          case 64: {
            testRepeatedInt64_.AddEntriesFrom(input, _repeated_testRepeatedInt64_codec);
            break;
          }
        }
      }
    }

  }

  public partial class UnitInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnitInfo> _parser = new pb::MessageParser<UnitInfo>(() => (UnitInfo)MessagePool.Instance.Fetch(typeof(UnitInfo)));
    public static pb::MessageParser<UnitInfo> Parser { get { return _parser; } }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    private int angleY_;
    public int AngleY {
      get { return angleY_; }
      set {
        angleY_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (AngleY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AngleY);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (AngleY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AngleY);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      angleY_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 40: {
            AngleY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class UnitOperation : pb::IMessage {
    private static readonly pb::MessageParser<UnitOperation> _parser = new pb::MessageParser<UnitOperation>(() => (UnitOperation)MessagePool.Instance.Fetch(typeof(UnitOperation)));
    public static pb::MessageParser<UnitOperation> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    private long time_;
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private int z_;
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    private int angleY_;
    public int AngleY {
      get { return angleY_; }
      set {
        angleY_ = value;
      }
    }

    private int operation_;
    public int Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_intParams_codec
        = pb::FieldCodec.ForInt32(98);
    private pbc::RepeatedField<int> intParams_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> IntParams {
      get { return intParams_; }
      set { intParams_ = value; }
    }

    private string stringParams_ = "";
    public string StringParams {
      get { return stringParams_; }
      set {
        stringParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_longParams_codec
        = pb::FieldCodec.ForInt64(114);
    private pbc::RepeatedField<long> longParams_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> LongParams {
      get { return longParams_; }
      set { longParams_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Index);
      }
      if (Time != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Time);
      }
      if (UnitId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(UnitId);
      }
      if (X != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Z);
      }
      if (AngleY != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AngleY);
      }
      if (Operation != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Operation);
      }
      intParams_.WriteTo(output, _repeated_intParams_codec);
      if (StringParams.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(StringParams);
      }
      longParams_.WriteTo(output, _repeated_longParams_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (AngleY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AngleY);
      }
      if (Operation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operation);
      }
      size += intParams_.CalculateSize(_repeated_intParams_codec);
      if (StringParams.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringParams);
      }
      size += longParams_.CalculateSize(_repeated_longParams_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      id_ = 0;
      index_ = 0;
      time_ = 0;
      unitId_ = 0;
      x_ = 0;
      y_ = 0;
      z_ = 0;
      angleY_ = 0;
      operation_ = 0;
      intParams_.Clear();
      stringParams_ = "";
      longParams_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            ActorId = input.ReadInt64();
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
          case 32: {
            Index = input.ReadInt32();
            break;
          }
          case 40: {
            Time = input.ReadInt64();
            break;
          }
          case 48: {
            UnitId = input.ReadInt64();
            break;
          }
          case 56: {
            X = input.ReadInt32();
            break;
          }
          case 64: {
            Y = input.ReadInt32();
            break;
          }
          case 72: {
            Z = input.ReadInt32();
            break;
          }
          case 80: {
            AngleY = input.ReadInt32();
            break;
          }
          case 88: {
            Operation = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            intParams_.AddEntriesFrom(input, _repeated_intParams_codec);
            break;
          }
          case 106: {
            StringParams = input.ReadString();
            break;
          }
          case 114:
          case 112: {
            longParams_.AddEntriesFrom(input, _repeated_longParams_codec);
            break;
          }
        }
      }
    }

  }

  public partial class EntiyInfo : pb::IMessage {
    private static readonly pb::MessageParser<EntiyInfo> _parser = new pb::MessageParser<EntiyInfo>(() => (EntiyInfo)MessagePool.Instance.Fetch(typeof(EntiyInfo)));
    public static pb::MessageParser<EntiyInfo> Parser { get { return _parser; } }

    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private pb::ByteString bsonBytes_ = pb::ByteString.Empty;
    public pb::ByteString BsonBytes {
      get { return bsonBytes_; }
      set {
        bsonBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (BsonBytes.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BsonBytes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (BsonBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BsonBytes);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      type_ = 0;
      bsonBytes_ = pb::ByteString.Empty;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            BsonBytes = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_InViewUnits : pb::IMessage {
    private static readonly pb::MessageParser<M2C_InViewUnits> _parser = new pb::MessageParser<M2C_InViewUnits>(() => (M2C_InViewUnits)MessagePool.Instance.Fetch(typeof(M2C_InViewUnits)));
    public static pb::MessageParser<M2C_InViewUnits> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.EntiyInfo> _repeated_inViewEntitys_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.EntiyInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.EntiyInfo> inViewEntitys_ = new pbc::RepeatedField<global::ETHotfix.EntiyInfo>();
    public pbc::RepeatedField<global::ETHotfix.EntiyInfo> InViewEntitys {
      get { return inViewEntitys_; }
      set { inViewEntitys_ = value; }
    }

    private pb::ByteString selfUnit_ = pb::ByteString.Empty;
    public pb::ByteString SelfUnit {
      get { return selfUnit_; }
      set {
        selfUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int spaceType_;
    public int SpaceType {
      get { return spaceType_; }
      set {
        spaceType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ActorId);
      }
      inViewEntitys_.WriteTo(output, _repeated_inViewEntitys_codec);
      if (SelfUnit.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(SelfUnit);
      }
      if (SpaceType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SpaceType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += inViewEntitys_.CalculateSize(_repeated_inViewEntitys_codec);
      if (SelfUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SelfUnit);
      }
      if (SpaceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      for (int i = 0; i < inViewEntitys_.Count; i++) { MessagePool.Instance.Recycle(inViewEntitys_[i]); }
      inViewEntitys_.Clear();
      selfUnit_ = pb::ByteString.Empty;
      spaceType_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            ActorId = input.ReadInt64();
            break;
          }
          case 26: {
            inViewEntitys_.AddEntriesFrom(input, _repeated_inViewEntitys_codec);
            break;
          }
          case 34: {
            SelfUnit = input.ReadBytes();
            break;
          }
          case 40: {
            SpaceType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_OnEnterView : pb::IMessage {
    private static readonly pb::MessageParser<M2C_OnEnterView> _parser = new pb::MessageParser<M2C_OnEnterView>(() => (M2C_OnEnterView)MessagePool.Instance.Fetch(typeof(M2C_OnEnterView)));
    public static pb::MessageParser<M2C_OnEnterView> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.EntiyInfo enterEntity_;
    public global::ETHotfix.EntiyInfo EnterEntity {
      get { return enterEntity_; }
      set {
        enterEntity_ = value;
      }
    }

    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private int z_;
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    private int angleY_;
    public int AngleY {
      get { return angleY_; }
      set {
        angleY_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ActorId);
      }
      if (enterEntity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EnterEntity);
      }
      if (X != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Z);
      }
      if (AngleY != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AngleY);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (enterEntity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnterEntity);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (AngleY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AngleY);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      if (enterEntity_ != null) MessagePool.Instance.Recycle(enterEntity_); enterEntity_ = null;
      x_ = 0;
      y_ = 0;
      z_ = 0;
      angleY_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            ActorId = input.ReadInt64();
            break;
          }
          case 26: {
            if (enterEntity_ == null) {
              enterEntity_ = new global::ETHotfix.EntiyInfo();
            }
            input.ReadMessage(enterEntity_);
            break;
          }
          case 32: {
            X = input.ReadInt32();
            break;
          }
          case 40: {
            Y = input.ReadInt32();
            break;
          }
          case 48: {
            Z = input.ReadInt32();
            break;
          }
          case 56: {
            AngleY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_OnLeaveView : pb::IMessage {
    private static readonly pb::MessageParser<M2C_OnLeaveView> _parser = new pb::MessageParser<M2C_OnLeaveView>(() => (M2C_OnLeaveView)MessagePool.Instance.Fetch(typeof(M2C_OnLeaveView)));
    public static pb::MessageParser<M2C_OnLeaveView> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long leaveEntity_;
    public long LeaveEntity {
      get { return leaveEntity_; }
      set {
        leaveEntity_ = value;
      }
    }

    private int entityType_;
    public int EntityType {
      get { return entityType_; }
      set {
        entityType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ActorId);
      }
      if (LeaveEntity != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LeaveEntity);
      }
      if (EntityType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EntityType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (LeaveEntity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeaveEntity);
      }
      if (EntityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      leaveEntity_ = 0;
      entityType_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            ActorId = input.ReadInt64();
            break;
          }
          case 24: {
            LeaveEntity = input.ReadInt64();
            break;
          }
          case 32: {
            EntityType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_OnEntityChanged : pb::IMessage {
    private static readonly pb::MessageParser<M2C_OnEntityChanged> _parser = new pb::MessageParser<M2C_OnEntityChanged>(() => (M2C_OnEntityChanged)MessagePool.Instance.Fetch(typeof(M2C_OnEntityChanged)));
    public static pb::MessageParser<M2C_OnEntityChanged> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long entityId_;
    public long EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    private int entityType_;
    public int EntityType {
      get { return entityType_; }
      set {
        entityType_ = value;
      }
    }

    private int componentType_;
    public int ComponentType {
      get { return componentType_; }
      set {
        componentType_ = value;
      }
    }

    private int propertyId_;
    public int PropertyId {
      get { return propertyId_; }
      set {
        propertyId_ = value;
      }
    }

    private pb::ByteString propertyValue_ = pb::ByteString.Empty;
    public pb::ByteString PropertyValue {
      get { return propertyValue_; }
      set {
        propertyValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private int z_;
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    private int angleY_;
    public int AngleY {
      get { return angleY_; }
      set {
        angleY_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
      if (EntityId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EntityId);
      }
      if (EntityType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EntityType);
      }
      if (ComponentType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ComponentType);
      }
      if (PropertyId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PropertyId);
      }
      if (PropertyValue.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(PropertyValue);
      }
      if (X != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Z);
      }
      if (AngleY != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AngleY);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (EntityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EntityId);
      }
      if (EntityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityType);
      }
      if (ComponentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComponentType);
      }
      if (PropertyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyId);
      }
      if (PropertyValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PropertyValue);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (AngleY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AngleY);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      id_ = 0;
      entityId_ = 0;
      entityType_ = 0;
      componentType_ = 0;
      propertyId_ = 0;
      propertyValue_ = pb::ByteString.Empty;
      x_ = 0;
      y_ = 0;
      z_ = 0;
      angleY_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            ActorId = input.ReadInt64();
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
          case 32: {
            EntityId = input.ReadInt64();
            break;
          }
          case 40: {
            EntityType = input.ReadInt32();
            break;
          }
          case 48: {
            ComponentType = input.ReadInt32();
            break;
          }
          case 56: {
            PropertyId = input.ReadInt32();
            break;
          }
          case 66: {
            PropertyValue = input.ReadBytes();
            break;
          }
          case 72: {
            X = input.ReadInt32();
            break;
          }
          case 80: {
            Y = input.ReadInt32();
            break;
          }
          case 88: {
            Z = input.ReadInt32();
            break;
          }
          case 96: {
            AngleY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_SetEntityProperty : pb::IMessage {
    private static readonly pb::MessageParser<C2M_SetEntityProperty> _parser = new pb::MessageParser<C2M_SetEntityProperty>(() => (C2M_SetEntityProperty)MessagePool.Instance.Fetch(typeof(C2M_SetEntityProperty)));
    public static pb::MessageParser<C2M_SetEntityProperty> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int propertyId_;
    public int PropertyId {
      get { return propertyId_; }
      set {
        propertyId_ = value;
      }
    }

    private pb::ByteString propertyValue_ = pb::ByteString.Empty;
    public pb::ByteString PropertyValue {
      get { return propertyValue_; }
      set {
        propertyValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
      if (PropertyId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PropertyId);
      }
      if (PropertyValue.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(PropertyValue);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (PropertyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyId);
      }
      if (PropertyValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PropertyValue);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      id_ = 0;
      propertyId_ = 0;
      propertyValue_ = pb::ByteString.Empty;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            ActorId = input.ReadInt64();
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
          case 32: {
            PropertyId = input.ReadInt32();
            break;
          }
          case 42: {
            PropertyValue = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public partial class FireRequest : pb::IMessage {
    private static readonly pb::MessageParser<FireRequest> _parser = new pb::MessageParser<FireRequest>(() => (FireRequest)MessagePool.Instance.Fetch(typeof(FireRequest)));
    public static pb::MessageParser<FireRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private int z_;
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ActorId);
      }
      if (X != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Z);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      x_ = 0;
      y_ = 0;
      z_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            ActorId = input.ReadInt64();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2M_GetCopyMap : pb::IMessage {
    private static readonly pb::MessageParser<G2M_GetCopyMap> _parser = new pb::MessageParser<G2M_GetCopyMap>(() => (G2M_GetCopyMap)MessagePool.Instance.Fetch(typeof(G2M_GetCopyMap)));
    public static pb::MessageParser<G2M_GetCopyMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
