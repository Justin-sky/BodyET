/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;

	public class EntityDef
	{
		public static Dictionary<string, UInt16> datatype2id = new Dictionary<string, UInt16>();
		//public static Dictionary<string, DATATYPE_BASE> datatypes = new Dictionary<string, DATATYPE_BASE>();
		//public static Dictionary<UInt16, DATATYPE_BASE> id2datatypes = new Dictionary<UInt16, DATATYPE_BASE>();
		public static Dictionary<string, Int32> entityclass = new Dictionary<string, Int32>();
		public static Dictionary<string, ScriptModule> moduledefs = new Dictionary<string, ScriptModule>();
		public static Dictionary<UInt16, ScriptModule> idmoduledefs = new Dictionary<UInt16, ScriptModule>();

		public static bool init()
		{
			initDataTypes();
			initDefTypes();
			initScriptModules();
			return true;
		}

		public static bool reset()
		{
			clear();
			return init();
		}

		public static void clear()
		{
			datatype2id.Clear();
			//datatypes.Clear();
			//id2datatypes.Clear();
			entityclass.Clear();
			moduledefs.Clear();
			idmoduledefs.Clear();
		}

		public static void initDataTypes()
		{
			//datatypes["UINT8"] = new DATATYPE_UINT8();
			//datatypes["UINT16"] = new DATATYPE_UINT16();
			//datatypes["UINT32"] = new DATATYPE_UINT32();
			//datatypes["UINT64"] = new DATATYPE_UINT64();

			//datatypes["INT8"] = new DATATYPE_INT8();
			//datatypes["INT16"] = new DATATYPE_INT16();
			//datatypes["INT32"] = new DATATYPE_INT32();
			//datatypes["INT64"] = new DATATYPE_INT64();

			//datatypes["FLOAT"] = new DATATYPE_FLOAT();
			//datatypes["DOUBLE"] = new DATATYPE_DOUBLE();

			//datatypes["STRING"] = new DATATYPE_STRING();
			//datatypes["VECTOR2"] = new DATATYPE_VECTOR2();

			//datatypes["VECTOR3"] = new DATATYPE_VECTOR3();

			//datatypes["VECTOR4"] = new DATATYPE_VECTOR4();
			//datatypes["PYTHON"] = new DATATYPE_PYTHON();

			//datatypes["UNICODE"] = new DATATYPE_UNICODE();
			//datatypes["ENTITYCALL"] = new DATATYPE_ENTITYCALL();

			//datatypes["BLOB"] = new DATATYPE_BLOB();
		}

		public static void initScriptModules()
		{
			ScriptModule pAccountModule = new ScriptModule("Account");
			EntityDef.moduledefs["Account"] = pAccountModule;
			EntityDef.idmoduledefs[1] = pAccountModule;

			Property pAccount_position = new Property();
			pAccount_position.name = "position";
			pAccount_position.properUtype = 40000;
			pAccount_position.properFlags = 4;
			pAccount_position.aliasID = 1;
			Vector3 Account_position_defval = new Vector3();
			pAccount_position.defaultVal = Account_position_defval;
			pAccountModule.propertys["position"] = pAccount_position; 

			pAccountModule.usePropertyDescrAlias = true;
			pAccountModule.idpropertys[(UInt16)pAccount_position.aliasID] = pAccount_position;

			//Dbg.DEBUG_MSG("EntityDef::initScriptModules: add(Account), property(position / 40000).");

			Property pAccount_direction = new Property();
			pAccount_direction.name = "direction";
			pAccount_direction.properUtype = 40001;
			pAccount_direction.properFlags = 4;
			pAccount_direction.aliasID = 2;
			Vector3 Account_direction_defval = new Vector3();
			pAccount_direction.defaultVal = Account_direction_defval;
			pAccountModule.propertys["direction"] = pAccount_direction; 

			pAccountModule.usePropertyDescrAlias = true;
			pAccountModule.idpropertys[(UInt16)pAccount_direction.aliasID] = pAccount_direction;

			//Dbg.DEBUG_MSG("EntityDef::initScriptModules: add(Account), property(direction / 40001).");

			Property pAccount_spaceID = new Property();
			pAccount_spaceID.name = "spaceID";
			pAccount_spaceID.properUtype = 40002;
			pAccount_spaceID.properFlags = 16;
			pAccount_spaceID.aliasID = 3;
			UInt32 Account_spaceID_defval;
			UInt32.TryParse("", out Account_spaceID_defval);
			pAccount_spaceID.defaultVal = Account_spaceID_defval;
			pAccountModule.propertys["spaceID"] = pAccount_spaceID; 

			pAccountModule.usePropertyDescrAlias = true;
			pAccountModule.idpropertys[(UInt16)pAccount_spaceID.aliasID] = pAccount_spaceID;

			//Dbg.DEBUG_MSG("EntityDef::initScriptModules: add(Account), property(spaceID / 40002).");

			Property pAccount_flag = new Property();
			pAccount_flag.name = "flag";
			pAccount_flag.properUtype = 2;
			pAccount_flag.properFlags = 4;
			pAccount_flag.aliasID = 4;
			Byte Account_flag_defval;
			Byte.TryParse("0", out Account_flag_defval);
			pAccount_flag.defaultVal = Account_flag_defval;
			pAccountModule.propertys["flag"] = pAccount_flag; 

			pAccountModule.usePropertyDescrAlias = true;
			pAccountModule.idpropertys[(UInt16)pAccount_flag.aliasID] = pAccount_flag;

			//Dbg.DEBUG_MSG("EntityDef::initScriptModules: add(Account), property(flag / 2).");

			Property pAccount_matching = new Property();
			pAccount_matching.name = "matching";
			pAccount_matching.properUtype = 1;
			pAccount_matching.properFlags = 32;
			pAccount_matching.aliasID = 5;
			Byte Account_matching_defval;
			Byte.TryParse("0", out Account_matching_defval);
			pAccount_matching.defaultVal = Account_matching_defval;
			pAccountModule.propertys["matching"] = pAccount_matching; 

			pAccountModule.usePropertyDescrAlias = true;
			pAccountModule.idpropertys[(UInt16)pAccount_matching.aliasID] = pAccount_matching;

			//pAccountModule.useMethodDescrAlias = true;
			//List<DATATYPE_BASE> pAccount_startMatch_args = new List<DATATYPE_BASE>();
		}

		public static void initDefTypes()
		{
		}
	}
}